{"version":3,"sources":["components/PopulationChart.jsx","App.jsx","serviceWorker.js","index.js"],"names":["PopulationChart","props","changeHorizontal","setState","options","state","plotOptions","bar","horizontal","chart","background","foreColor","xaxis","categories","fill","colors","dataLabels","enabled","title","text","align","margin","offsetY","style","fontSize","series","name","data","this","type","height","width","onClick","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAkGeA,E,kDA9FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA8DVC,iBAAmB,WACf,EAAKC,SAAS,CACVC,QAAQ,2BACD,EAAKC,MAAMD,SADX,IAEHE,YAAY,2BACL,EAAKD,MAAMD,QAAQE,aADf,IAEPC,IAAI,2BACG,EAAKF,MAAMD,QAAQE,YAAYC,KADnC,IAECC,YAAa,EAAKH,MAAMD,QAAQE,YAAYC,IAAIC,oBArEhE,EAAKH,MAAQ,CACTD,QAAS,CACLK,MAAO,CACHC,WAAY,UACZC,UAAW,QAEfC,MAAO,CACHC,WAAY,CACR,WACA,cACA,UACA,UACA,eACA,UACA,cACA,YACA,SACA,aAGRP,YAAa,CACTC,IAAK,CACDC,YAAY,IAGpBM,KAAM,CACFC,OAAQ,CAAC,YAEbC,WAAY,CACRC,SAAS,GAEbC,MAAO,CACHC,KAAM,kCACNC,MAAO,SACPC,OAAQ,GACRC,QAAS,GACTC,MAAO,CACHC,SAAU,UAItBC,OAAQ,CACJ,CACIC,KAAM,aACNC,KAAM,CACF,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,YAxDD,E,qDA+Ef,OACI,oCACI,kBAAC,IAAD,CACIvB,QAASwB,KAAKvB,MAAMD,QACpBqB,OAAQG,KAAKvB,MAAMoB,OACnBI,KAAK,MACLC,OAAO,QACPC,MAAM,SAEV,4BAAQC,QAASJ,KAAK1B,kBAAtB,e,GAzFc+B,IAAMC,WCQrBC,MARf,WACE,OACE,yBAAKC,UAAU,aACX,kBAAC,EAAD,QCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1c3c4692.chunk.js","sourcesContent":["import React from 'react';\nimport Chart from 'react-apexcharts';\n\nclass PopulationChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: {\n                chart: {\n                    background: '#f4f4f4',\n                    foreColor: '#333',\n                },\n                xaxis: {\n                    categories: [\n                        'New York',\n                        'Los Angeles',\n                        'Chicago',\n                        'Houston',\n                        'Philadelphia',\n                        'Phoenix',\n                        'San Antonio',\n                        'San Diego',\n                        'Dallas',\n                        'San Jose',\n                    ],\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: false,\n                    },\n                },\n                fill: {\n                    colors: ['#f44336'],\n                },\n                dataLabels: {\n                    enabled: false,\n                },\n                title: {\n                    text: 'Largest US Cities By Population',\n                    align: 'center',\n                    margin: 20,\n                    offsetY: 20,\n                    style: {\n                        fontSize: '25px',\n                    },\n                },\n            },\n            series: [\n                {\n                    name: 'Population',\n                    data: [\n                        8550405,\n                        3971883,\n                        2720546,\n                        2296224,\n                        1567442,\n                        1563025,\n                        1469845,\n                        1394928,\n                        1300092,\n                        1026908,\n                    ],\n                },\n            ],\n        };\n    }\n\n    changeHorizontal = () => {\n        this.setState({\n            options: {\n                ...this.state.options,\n                plotOptions: {\n                    ...this.state.options.plotOptions,\n                    bar: {\n                        ...this.state.options.plotOptions.bar,\n                        horizontal: !this.state.options.plotOptions.bar.horizontal,\n                    },\n                },\n            },\n        });\n    };\n\n    render() {\n        return (\n            <>\n                <Chart\n                    options={this.state.options}\n                    series={this.state.series}\n                    type=\"bar\"\n                    height=\"450px\"\n                    width=\"100%\"\n                />\n                <button onClick={this.changeHorizontal}>Change</button>\n            </>\n        );\n    }\n}\n\nexport default PopulationChart;\n","import React from 'react';\nimport PopulationChart from \"./components/PopulationChart\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <PopulationChart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}